/*
 * This file is generated by jOOQ.
 */
package com.jordansimsmith.subfootball.tracker.jooq.tables.records;


import com.jordansimsmith.subfootball.tracker.jooq.tables.Content;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContentRecord extends UpdatableRecordImpl<ContentRecord> implements Record3<Long, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.content.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.content.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.content.content</code>.
     */
    public void setContent(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.content.content</code>.
     */
    public String getContent() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.content.date</code>.
     */
    public void setDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.content.date</code>.
     */
    public LocalDateTime getDate() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Content.CONTENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Content.CONTENT.CONTENT_;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Content.CONTENT.DATE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getContent();
    }

    @Override
    public LocalDateTime component3() {
        return getDate();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getContent();
    }

    @Override
    public LocalDateTime value3() {
        return getDate();
    }

    @Override
    public ContentRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ContentRecord value2(String value) {
        setContent(value);
        return this;
    }

    @Override
    public ContentRecord value3(LocalDateTime value) {
        setDate(value);
        return this;
    }

    @Override
    public ContentRecord values(Long value1, String value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContentRecord
     */
    public ContentRecord() {
        super(Content.CONTENT);
    }

    /**
     * Create a detached, initialised ContentRecord
     */
    public ContentRecord(Long id, String content, LocalDateTime date) {
        super(Content.CONTENT);

        setId(id);
        setContent(content);
        setDate(date);
        resetChangedOnNotNull();
    }
}
